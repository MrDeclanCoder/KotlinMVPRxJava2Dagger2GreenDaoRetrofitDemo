package greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dch.test.entity.MyFavorite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_FAVORITE".
*/
public class MyFavoriteDao extends AbstractDao<MyFavorite, Long> {

    public static final String TABLENAME = "MY_FAVORITE";

    /**
     * Properties of entity MyFavorite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FavoriteId = new Property(1, String.class, "favoriteId", false, "FAVORITE_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property ContentDiscription = new Property(3, String.class, "contentDiscription", false, "CONTENT_DISCRIPTION");
        public final static Property CollectTime = new Property(4, String.class, "collectTime", false, "COLLECT_TIME");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property ImgUrl = new Property(6, String.class, "imgUrl", false, "IMG_URL");
    }


    public MyFavoriteDao(DaoConfig config) {
        super(config);
    }
    
    public MyFavoriteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_FAVORITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FAVORITE_ID\" TEXT," + // 1: favoriteId
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT_DISCRIPTION\" TEXT," + // 3: contentDiscription
                "\"COLLECT_TIME\" TEXT," + // 4: collectTime
                "\"URL\" TEXT," + // 5: url
                "\"IMG_URL\" TEXT);"); // 6: imgUrl
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MY_FAVORITE_FAVORITE_ID ON \"MY_FAVORITE\"" +
                " (\"FAVORITE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_FAVORITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyFavorite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String favoriteId = entity.getFavoriteId();
        if (favoriteId != null) {
            stmt.bindString(2, favoriteId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String contentDiscription = entity.getContentDiscription();
        if (contentDiscription != null) {
            stmt.bindString(4, contentDiscription);
        }
 
        String collectTime = entity.getCollectTime();
        if (collectTime != null) {
            stmt.bindString(5, collectTime);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(7, imgUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyFavorite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String favoriteId = entity.getFavoriteId();
        if (favoriteId != null) {
            stmt.bindString(2, favoriteId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String contentDiscription = entity.getContentDiscription();
        if (contentDiscription != null) {
            stmt.bindString(4, contentDiscription);
        }
 
        String collectTime = entity.getCollectTime();
        if (collectTime != null) {
            stmt.bindString(5, collectTime);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(7, imgUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyFavorite readEntity(Cursor cursor, int offset) {
        MyFavorite entity = new MyFavorite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // favoriteId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contentDiscription
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // collectTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // imgUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyFavorite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFavoriteId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContentDiscription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCollectTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImgUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyFavorite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyFavorite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyFavorite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
